fn syscall1(id: isize, arg1: isize) -> ! {
    asm volatile (
        a = id,
        D = arg1,
        rcx, r11
    ) -> a { "syscall" }
}

fn syscall3(id: isize, arg1: isize, arg2: isize, arg3: isize) -> isize {
    asm volatile (
        a = id,
        D = arg1,
        S = arg2,
        d = arg3,
        rcx, r11
    ) -> a { "syscall" }
}

fn write(stream: isize, msg: *c_char, len: isize) -> isize {
    return syscall3(1 as isize, stream as isize, msg as isize, len as isize);
}

fn exit(status: i32) -> ! {
    syscall1(60 as isize, status as isize);
}

pub fn _start() -> ! {
    let stdout = 1 as isize;
    let EXIT_SUCCESS = 0;

    let msg: *c_char = "Hello, World!\n";
    let len = 14 as isize;

    write(stdout, msg, len);

    exit(EXIT_SUCCESS);
}
