fn syscall1(id: isize, arg1: isize) -> isize {
    asm volatile (
        a = id,
        D = arg1,
        rcx, r11
    ) -> a { "syscall" }
}

fn syscall3(id: isize, arg1: isize, arg2: isize, arg3: isize) -> isize {
    asm volatile (
        a = id,
        D = arg1,
        S = arg2,
        d = arg3,
        rcx, r11
    ) -> a { "syscall" }
}

fn write(stream: isize, msg: *u8, len: isize) -> isize {
    syscall3(1 as isize, stream as isize, msg as isize, len as isize)
}

fn exit(status: i32) -> unreachable {
    syscall1(60 as isize, status as isize);

    unreachable
}

const STDOUT = 1 as isize;
const EXIT_SUCCESS = 0;

pub fn _start() -> unreachable {
    let msg = "hey, there!\n";
    let len = 14 as isize;

    write(STDOUT, msg, len);

    exit(EXIT_SUCCESS)
}
